import os
import json
from io import StringIO
from dotenv import load_dotenv
import firebase_admin
from firebase_admin import credentials, db
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env –∏–ª–∏ Render) ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
FIREBASE_DB_URL = os.getenv("FIREBASE_DB_URL")
FIREBASE_CREDENTIALS_JSON = os.getenv("FIREBASE_CREDENTIALS_JSON")

if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")
if not FIREBASE_DB_URL:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è FIREBASE_DB_URL –Ω–µ –∑–∞–¥–∞–Ω–∞")
if not FIREBASE_CREDENTIALS_JSON:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è FIREBASE_CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω–∞")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase ===
cred = credentials.Certificate(json.load(StringIO(FIREBASE_CREDENTIALS_JSON)))
firebase_admin.initialize_app(cred, {
    'databaseURL': FIREBASE_DB_URL
})


# === –ö–æ–º–∞–Ω–¥–∞ /start —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üìä –°—Ç–∞—Ç—É—Å", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç SmartPlant üå±\n–í–æ—Ç, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:",
        reply_markup=reply_markup
    )


# === /status –∏ –∫–Ω–æ–ø–∫–∞ ‚Äú–°—Ç–∞—Ç—É—Å‚Äù ===
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ref = db.reference("plants/plant_001/data")
    data = ref.get() or {}
    temp = data.get("temperature", "‚Äî")
    hum = data.get("humidity", "‚Äî")
    soil = data.get("soilMoisture", "‚Äî")
    await update.message.reply_text(
        f"üåø –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {hum}%\n"
        f"üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {soil}%"
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (reply-–∫–Ω–æ–ø–∫–∏) ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "—Å—Ç–∞—Ç—É—Å" in text:
        await status(update, context)
    elif "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" in text:
        await update.message.reply_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã üôÇ")
    else:
        await update.message.reply_text("ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ 'üìä –°—Ç–∞—Ç—É—Å' –∏ '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏'")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ —Ä–µ—à–∏—à—å –æ—Å—Ç–∞–≤–∏—Ç—å) ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "status":
        await status(query, context)
    elif query.data == "settings":
        await query.edit_message_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã üôÇ")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("‚úÖ –ë–æ—Ç SmartPlant –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram")
    app.run_polling()
