import os
import json
import firebase_admin
from firebase_admin import credentials, db
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
FIREBASE_DB_URL = os.getenv("FIREBASE_DB_URL")

if not BOT_TOKEN or not FIREBASE_DB_URL:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ FIREBASE_DB_URL")

try:
    cred = credentials.Certificate("firebase-key.json")
    firebase_admin.initialize_app(cred, {"databaseURL": FIREBASE_DB_URL})
except Exception as e:
    raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")

# –ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SmartPlant!", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "status":
        ref = db.reference("plants/plant_001/data")
        data = ref.get() or {}
        temp = data.get("temperature", "‚Äî")
        hum = data.get("humidity", "‚Äî")
        soil = data.get("soilMoisture", "‚Äî")

        await query.edit_message_text(
            f"üåø –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {hum}%\n"
            f"üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {soil}%"
        )
    elif query.data == "settings":
        await query.edit_message_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã üôÇ")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("‚úÖ –ë–æ—Ç SmartPlant –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
