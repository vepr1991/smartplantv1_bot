import os
import firebase_admin
from firebase_admin import credentials, db
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes,
    filters, ConversationHandler
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
FIREBASE_DB_URL = os.getenv("FIREBASE_DB_URL")

if not BOT_TOKEN or not FIREBASE_DB_URL:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ FIREBASE_DB_URL")

# Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if not firebase_admin._apps:
    cred = credentials.Certificate("firebase-key.json")
    firebase_admin.initialize_app(cred, {"databaseURL": FIREBASE_DB_URL})

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_FOR_PLANT_NAME = 1
WAITING_FOR_DELETE_NAME = 2

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")],
        [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø SmartPlant üåø")
    await show_main_menu(update, context)

# üìä –°—Ç–∞—Ç—É—Å
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plants_ref = db.reference("plants").get()
    if not plants_ref:
        await update.message.reply_text("üò¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.")
        return

    reply = "üå± *–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Ç–µ–Ω–∏–π:*\n"
    for name, data in plants_ref.items():
        plant_data = data.get("data", {})
        temp = plant_data.get("temperature", "‚Äî")
        hum = plant_data.get("humidity", "‚Äî")
        soil = plant_data.get("soilMoisture", "‚Äî")
        reply += f"\nüîπ *{name}*\nüå° {temp}¬∞C | üíß {hum}% | üå± {soil}%"

    await update.message.reply_text(reply, parse_mode='Markdown')
    await show_main_menu(update, context)

# ‚ûï –î–æ–±–∞–≤–∏—Ç—å
async def add_plant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è:")
    return WAITING_FOR_PLANT_NAME

async def save_new_plant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plant_name = update.message.text.strip()
    ref = db.reference(f"plants/{plant_name}")
    if ref.get():
        await update.message.reply_text("‚ö† –†–∞—Å—Ç–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        ref.set({
            "data": {
                "temperature": 0,
                "humidity": 0,
                "soilMoisture": 0
            }
        })
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ *{plant_name}* –¥–æ–±–∞–≤–ª–µ–Ω–æ!", parse_mode='Markdown')
    await show_main_menu(update, context)
    return ConversationHandler.END

# ‚ùå –£–¥–∞–ª–∏—Ç—å
async def delete_plant_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plants_ref = db.reference("plants").get()
    if not plants_ref:
        await update.message.reply_text("üò¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

    plant_names = list(plants_ref.keys())
    buttons = [[KeyboardButton(name)] for name in plant_names]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–∞—Å—Ç–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=reply_markup)
    return WAITING_FOR_DELETE_NAME

async def confirm_delete_plant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plant_name = update.message.text.strip()
    ref = db.reference(f"plants/{plant_name}")
    if ref.get():
        ref.delete()
        await update.message.reply_text(f"üóë –†–∞—Å—Ç–µ–Ω–∏–µ {plant_name} —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await show_main_menu(update, context)
    return ConversationHandler.END

# üö´ –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_main_menu(update, context)
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìä –°—Ç–∞—Ç—É—Å"), status))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"), add_plant)],
        states={WAITING_FOR_PLANT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_plant)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"), delete_plant_request)],
        states={WAITING_FOR_DELETE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete_plant)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    ))

    print("‚úÖ –ë–æ—Ç SmartPlant –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram")
    app.run_polling()
